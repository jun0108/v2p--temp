/* ========================== Variables ========================== */
$button-style: (
  xs: (
    min-width: 65px,
    height: var(--form-height-xs),
    padding: 15px,
  ),
  sm: (
    min-width: 65px,
    height: var(--form-height-sm),
    padding: 15px,
  ),
  md: (
    min-width: 65px,
    height: var(--form-height-md),
    padding: 15px,
  ),
  lg: (
    min-width: 70px,
    height: var(--form-height-lg),
    padding: 20px,
  ),
  full: (
    min-width: 70px,
    height: var(--form-height-xl),
    padding: 20px,
  ),
);

$button-colors: (
  primary: (
    text: var(--color-primary-800),
    default: var(--color-primary-800),
    hover: var(--color-primary-900),
  ),
  secondary: (
    text: var(--color-secondary-800),
    default: var(--color-secondary-800),
    hover: var(--color-secondary-900),
  ),
  negative: (
    text: var(--color-gray-600),
    default: var(--color-gray-600),
    hover: var(--color-gray-700),
  ),
);

/* ========================== Mixins ========================== */
@mixin btn-base($type: 'full', $color: 'primary') {
  @include flex-box(justify-center items-center);
  @include btn-color($type: $type, $color: $color);
  & {
    width: max-content;
    border-radius: var(--radius-sm);
    cursor: pointer;
    white-space: nowrap;
    transition: var(--transition);
  }
  &:disabled {
    opacity: 0.4;
    cursor: not-allowed;
  }

  & + button {
    margin-left: 10px;
  }
}

@mixin btn-color($type, $color) {
  $color-map: map-get($button-colors, $color);
  border: 1px solid map-get($color-map, default);

  @if $type == 'full' {
    @include typo(var(--font-size-15), 500, var(--color-white));
    background-color: map-get($color-map, default);

    &:hover:not(:disabled) {
      border-color: map-get($color-map, default);
      background-color: map-get($color-map, hover);
    }
  } @else if $type == 'line' {
    @include typo(var(--font-size-15), 500, map-get($color-map, text));
    background-color: var(--color-white);

    &:hover:not(:disabled) {
      border-color: map-get($color-map, hover);
      color: map-get($color-map, hover);
    }
  }
}

@mixin btn-size($size: 'md') {
  $size-map: map-get($button-style, $size);
  & {
    min-width: map-get($size-map, min-width);
    height: map-get($size-map, height);
    padding: 0 map-get($size-map, padding);
  }
  // 별도 스타일 추가 가능
  @if $size == 'full' {
    & {
      @include flex-box(1);
      font-size: var(--font-size-16); // 예외 사용
    }
  }
  // 추가 조건 설정 가능
  &:has(.cm-icon) {
    padding: 0 calc(map-get($size-map, padding) - 3px);
  }
}

/* ========================== Styles ========================== */
.btn {
  &__full {
    @each $color in map-keys($button-colors) {
      @each $size in map-keys($button-style) {
        &--#{$color}-#{$size} {
          @include btn-base($type: 'full', $color: $color);
          @include btn-size($size);
        }
      }
    }
  }

  &__line {
   @each $color in map-keys($button-colors) {
      @each $size in map-keys($button-style) {
        &--#{$color}-#{$size} {
          @include btn-base($type: 'line', $color: $color);
          @include btn-size($size);
        }
      }
    }
  }
}
